{"ast":null,"code":"var _jsxFileName = \"/home/ayoub/Desktop/front end/OneStepJavaScript/hooks/src/contexts/ThemeContext.js\",\n    _s = $RefreshSig$();\n\n// import React,{useState, useContext} from \"react\";\n// const ThemeContext = React.createContext();\n// export default function ThemeContext(props) {\n//         const [theme,setTheme] =useState({     \n//             isLightTheme : true,\n//             light: { syntax: '#555', ui: '#ddd', bg: '#eee' },\n//             dark: { syntax: '#ddd', ui: '#333', bg: '#555'},\n//         }) \n//         ToggleTheme = () =>{\n//             setTheme ({isLightTheme : !theme.isLightTheme})\n//         }\n//         return (\n//             <ThemeContext.Provider value = {{theme,setTheme,ToggleTheme}}>\n//                 {props.children}\n//             </ThemeContext.Provider>\n//         );\n// }\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ThemeContext = /*#__PURE__*/React.createContext();\nexport function ThemeProvider(Props) {\n  _s();\n\n  const [theme, setTheme] = useState({\n    dark: {\n      bg: 'blue',\n      syn: '#fff'\n    },\n    light: {\n      bg: '#fff',\n      syn: 'blue'\n    },\n    islightTheme: true\n  });\n\n  function toggleTheme() {\n    setTheme({\n      dark: {\n        background: 'blue',\n        color: '#fff'\n      },\n      light: {\n        background: '#fff',\n        color: '#blue'\n      },\n      islightTheme: !theme.islightTheme\n    });\n    return theme;\n  }\n\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      theme,\n      toggleTheme\n    },\n    children: Props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ThemeProvider, \"ZR6Tg5alVA6EOcs5XNYNCygl4OQ=\");\n\n_c = ThemeProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"sources":["/home/ayoub/Desktop/front end/OneStepJavaScript/hooks/src/contexts/ThemeContext.js"],"names":["React","useState","ThemeContext","createContext","ThemeProvider","Props","theme","setTheme","dark","bg","syn","light","islightTheme","toggleTheme","background","color","children"],"mappings":";;;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;;AAEA,OAAO,MAAMC,YAAY,gBAAGF,KAAK,CAACG,aAAN,EAArB;AAEP,OAAO,SAASC,aAAT,CAAuBC,KAAvB,EAA6B;AAAA;;AAChC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC;AAC/BO,IAAAA,IAAI,EAAG;AAAEC,MAAAA,EAAE,EAAC,MAAL;AAAYC,MAAAA,GAAG,EAAE;AAAjB,KADwB;AAE/BC,IAAAA,KAAK,EAAG;AAACF,MAAAA,EAAE,EAAC,MAAJ;AAAWC,MAAAA,GAAG,EAAE;AAAhB,KAFuB;AAG/BE,IAAAA,YAAY,EAAG;AAHgB,GAAD,CAAlC;;AAOA,WAASC,WAAT,GAAsB;AAClBN,IAAAA,QAAQ,CAAC;AACTC,MAAAA,IAAI,EAAG;AAAEM,QAAAA,UAAU,EAAC,MAAb;AAAoBC,QAAAA,KAAK,EAAE;AAA3B,OADE;AAETJ,MAAAA,KAAK,EAAG;AAACG,QAAAA,UAAU,EAAC,MAAZ;AAAmBC,QAAAA,KAAK,EAAE;AAA1B,OAFC;AAGTH,MAAAA,YAAY,EAAG,CAACN,KAAK,CAACM;AAHb,KAAD,CAAR;AAIA,WAAON,KAAP;AACH;;AAED,sBACI,QAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE;AAACA,MAAAA,KAAD;AAAQO,MAAAA;AAAR,KAA9B;AAAA,cACKR,KAAK,CAACW;AADX;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH;;GAtBeZ,a;;KAAAA,a","sourcesContent":["// import React,{useState, useContext} from \"react\";\n// const ThemeContext = React.createContext();\n\n// export default function ThemeContext(props) {\n//         const [theme,setTheme] =useState({     \n//             isLightTheme : true,\n//             light: { syntax: '#555', ui: '#ddd', bg: '#eee' },\n//             dark: { syntax: '#ddd', ui: '#333', bg: '#555'},\n//         }) \n\n//         ToggleTheme = () =>{\n//             setTheme ({isLightTheme : !theme.isLightTheme})\n//         }\n//         return (\n//             <ThemeContext.Provider value = {{theme,setTheme,ToggleTheme}}>\n//                 {props.children}\n//             </ThemeContext.Provider>\n//         );\n// }\nimport React, {useState} from 'react';\n\nexport const ThemeContext = React.createContext();\n\nexport function ThemeProvider(Props){\n    const [theme, setTheme] = useState({\n        dark : { bg:'blue',syn: '#fff'},\n        light : {bg:'#fff',syn: 'blue'},\n        islightTheme : true\n    }\n    );\n\n    function toggleTheme(){\n        setTheme({\n        dark : { background:'blue',color: '#fff'},\n        light : {background:'#fff',color: '#blue'},\n        islightTheme : !theme.islightTheme });\n        return theme \n    }\n\n    return (\n        <ThemeContext.Provider value={{theme, toggleTheme}}>\n            {Props.children}\n        </ThemeContext.Provider>\n    );\n\n}\n"]},"metadata":{},"sourceType":"module"}